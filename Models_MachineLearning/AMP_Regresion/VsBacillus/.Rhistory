View(input_with_MBC)
View(input_naomit)
#Conteo de registros por cada clase
print(table(input_naomit_out_dup$bin_class))
print(table(input_naomit_out_dup$tri_class))
# Compuestos con MIC
input_with_MIC <- input %>%
filter(trimws(Cuantification_Type) != "")
# Compuestos sin MIC
input_wto_MIC <- anti_join(input, input_with_MIC, by = "Data_ID") #queda en el dataframe
save(input_wto_MIC, file="Compuestos_sin_MIC.RDA") # Guardar el dataframe de compuestos sin MIC
# Delete NA values in logMIC and filter Unity
input_naomit <- input_with_MIC %>%
rename(logMIC = "Mesure_(log)") %>%
mutate(logMIC = as.numeric(logMIC)) %>%
drop_na(logMIC) %>%
filter(Unity == "µg/ml" & Cuantification_Type == "MIC")
# Categorizar logMIC
input_naomit$bin_class <- cut(10^input_naomit$logMIC,
breaks=c(-Inf, 25, Inf),
labels=c("Inhibidor","No Inhibidor")) %>%
as.factor()
input_naomit$tri_class <- cut(10^input_naomit$logMIC,
breaks=c(-Inf, 25, 100, Inf),
labels=c("Inhibidor","Excluido","No Inhibidor")) %>%
as.factor()
library(rstatix)
# Remove outlier by Sequences
input_naomit_o1 <- input_naomit %>%
group_by(Sequences) %>%
rstatix::identify_outliers(logMIC) %>%
anti_join(input_naomit,.)
# Remove outlier in general
input_naomit_out <-  input_naomit_o1 %>%
rstatix::identify_outliers(logMIC) %>%
anti_join(input_naomit_o1,.)
#Conteo de registros por cada clase
print(table(input_naomit_out$bin_class))
print(table(input_naomit_out$tri_class))
# Remove outlier in general
input_naomit_out <-  input_naomit_o1 %>%
rstatix::identify_outliers(logMIC) %>%
anti_join(input_naomit_o1,.)
#Conteo de registros por cada clase
print(table(input_naomit_out$bin_class))
print(table(input_naomit_out$tri_class))
# Eliminar duplicados
input_naomit_out_dup <- input_naomit_out %>%
mutate(MIC = 10^logMIC) %>%
group_by(Sequences) %>%
mutate(MIC_mean = mean(MIC),
MIC_rsd = (sd(MIC)/mean(MIC))*100) %>%
ungroup() %>%
distinct(Sequences,.keep_all = TRUE) %>%
arrange(desc(MIC_rsd)) %>%
filter(MIC_rsd <= 5 | is.na(MIC_rsd)) %>%
group_by(Sequences) %>%
mutate(logMIC = log10(MIC_mean)) %>%
ungroup()  %>%
select(-Mesure, -MIC) %>%
relocate(MIC_mean, MIC_rsd, bin_class, tri_class,
.after = Quantitation_Specificity)
#Conteo de registros por cada clase
print(table(input_naomit_out_dup$bin_class))
print(table(input_naomit_out_dup$tri_class))
set.seed(123)
index <- createDataPartition(input_naomit_out_dup$logMIC,
p = .8, list = FALSE)
train_input <- input_naomit_out_dup[ index,]
test_input  <- input_naomit_out_dup[-index,]
# Check distributions
train_input %>% mutate(set = "Train") %>%
rbind(test_input %>% mutate(set = "Test")) %>%
ggplot(aes(logMIC, color = set)) +
geom_density()
# Seleccionar variables de informacion
train_info <- train_input %>%
select(Data_ID:References)
test_info <- test_input %>%
select(Data_ID:References)
# Seleccionar variable respuesta y descriptores
train_set <- train_input %>%
select(logMIC, bin_class, tri_class, Y:KGA)
test_set <- test_input %>%
select(logMIC, bin_class, tri_class, Y:KGA)
rec_train <- recipe(logMIC + bin_class + tri_class~ . , data = train_set) %>%
step_impute_knn(all_numeric_predictors()) %>%
step_nzv(all_predictors()) %>%
step_corr(all_numeric_predictors(), threshold = 0.85) %>%
prep()
train_prep <- juice(rec_train)
test_prep <- bake(rec_train, new_data = test_input)
save(rec_train, file = "rec_train.rda")
save(train_prep, file = "train_prep.rda")
save(test_prep, file = "test_prep.rda")
# Seleccionar variable respuesta y descriptores
train_set <- train_input %>%
select(logMIC, bin_class, tri_class, Y:KGA)
test_set <- test_input %>%
select(logMIC, bin_class, tri_class, Y:KGA)
# Compuestos con MIC
input_with_MBC <- input %>%
filter(trimws(Cuantification_Type) == "MBC")
# Delete NA values in logMIC and filter Unity
input_naomit <- input_with_MBC %>%
rename(logMIC = "Mesure_(log)") %>%
mutate(logMIC = as.numeric(logMIC)) %>%
drop_na(logMIC) %>%
filter(Unity == "µg/ml" & Cuantification_Type == "MBC")
# Categorizar logMIC
input_naomit$bin_class <- cut(10^input_naomit$logMIC,
breaks=c(-Inf, 25, Inf),
labels=c("Inhibidor","No Inhibidor")) %>%
as.factor()
input_naomit$tri_class <- cut(10^input_naomit$logMIC,
breaks=c(-Inf, 25, 100, Inf),
labels=c("Inhibidor","Excluido","No Inhibidor")) %>%
as.factor()
library(rstatix)
# Remove outlier by Sequences
input_naomit_o1 <- input_naomit %>%
group_by(Sequences) %>%
rstatix::identify_outliers(logMIC) %>%
anti_join(input_naomit,.)
# Remove outlier in general
input_naomit_out <-  input_naomit_o1 %>%
rstatix::identify_outliers(logMIC) %>%
anti_join(input_naomit_o1,.)
#Conteo de registros por cada clase
print(table(input_naomit_out$bin_class))
print(table(input_naomit_out$tri_class))
# Eliminar duplicados
input_naomit_out_dup <- input_naomit_out %>%
mutate(MIC = 10^logMIC) %>%
group_by(Sequences) %>%
mutate(MIC_mean = mean(MIC),
MIC_rsd = (sd(MIC)/mean(MIC))*100) %>%
ungroup() %>%
distinct(Sequences,.keep_all = TRUE) %>%
arrange(desc(MIC_rsd)) %>%
filter(MIC_rsd <= 5 | is.na(MIC_rsd)) %>%
group_by(Sequences) %>%
mutate(logMIC = log10(MIC_mean)) %>%
ungroup()  %>%
select(-Mesure, -MIC) %>%
relocate(MIC_mean, MIC_rsd, bin_class, tri_class,
.after = Quantitation_Specificity)
#Conteo de registros por cada clase
print(table(input_naomit_out_dup$bin_class))
print(table(input_naomit_out_dup$tri_class))
View(input_naomit_out_dup)
data_forpred <- input_naomit_out_dup %>%
select(logMIC, bin_class, tri_class, Y:KGA)
data_pred_prep <- bake(rec_train, new_data = data_forpred)
View(data_pred_prep)
# Se usa logMIC
data_pred_prep_logMIC <- data_pred_prep %>%
select(-bin_class, -tri_class)
View(data_pred_prep_logMIC)
load("C:/Users/eliez/Downloads/models_logMIC.rda")
ggplot(aes(data_pred_prep_logMIC$logMIC, color = set)) +
geom_density()
ggplot(aes(c(data_pred_prep_logMIC$logMIC), color = set)) +
geom_density()
# Predecir el logMIC
predicted_logMIC <- models_logMIC %>%
map(predict, prep_wto_MIC) %>%
bind_cols()
# Predecir el logMIC
predicted_logMIC <- models_logMIC %>%
map(predict, data_pred_prep_logMIC) %>%
bind_cols()
View(predicted_logMIC)
data_pred_prep_logMIC$logMIC
MBC = data_pred_prep_logMIC$logMIC
MBC<- data_pred_prep_logMIC$logMIC
view(MBC)
predicted_binclass <- models_binclass %>%
map(predict, data_pred_prep_logMIC) %>%
bind_cols()
View(predicted_binclass)
View(predicted_binclass)
load("C:/Users/eliez/Downloads/rf_fs.rda")
View(rf_fs)
View(rf_fs[["results"]])
View(rf_fs[["results"]])
class(rf_fs[["results"]])
write.xlsx(rf_fs[["results"]], "RFE_reg.xlsx")
write.xlsx(data, "ruta_del_archivo.xlsx")
install.packages("openxlsx")
library(openxlsx)
write.xlsx(rf_fs[["results"]], "RFE_reg.xlsx")
View(rf_fs[["variables"]])
rf_fs[["results"]][["Variables"]]
rf_fs[["perfNames"]]
rf_fs[["times"]]
rf_fs[["variables"]][["var"]]
load("C:/Users/eliez/Downloads/fs_ga.rda")
View(fs_ga)
View(fs_ga)
fs_ga[["ga"]][["internal"]][["RMSE"]]
fs_ga[["ga"]][["final"]]
View(fs_ga[["averages"]])
fs_ga[["optVariables"]]
fs_ga[["iters"]]
View(fs_ga[["external"]])
fs_ga[["external"]][["RMSE"]]
View(fs_ga[["ga"]][["internal"]])
# Librerias a instalar
list.of.packages <- c("tidyverse",  "readxl", "xlsx",
"recipes", "rstatix",
"caret", "caretEnsemble", "doParallel",
"pls", "elasticnet", "kernlab",
"randomForest", "klaR", "MASS", "gbm")
# Revisa e instala librerias faltantes
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Cargar librerias
packages_load <- c("tidyverse",  "readxl", "recipes", "rstatix",
"caret", "caretEnsemble", "doParallel", "gbm")
for (i in packages_load) {
library(i, character.only  = TRUE)
}
#Cargar los datos
input <- read_excel("DataSet_AntimicrobialPeptides_Descriptors.xlsx")
setwd("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidevsBacillus")
#Cargar los datos
input <- read_excel("DataSet_AntimicrobialPeptides_Descriptors.xlsx")
#Cargar los datos
input <- read_excel("DataSet_AntimicrobialPeptides_Descriptors.xlsx")
t0 = now()
# Filtro inicio
input_selected <- input %>%
rename(logMIC = "Mesure_(log)") %>%
rename(hoopwoods_1_mean = "hopp-woods_1_mean") %>%
filter(Cuantification_Type == "MIC" &
Genero =="Bacillus" &
Unity == "µg/ml"  &
is.na(Notes))
# Delete NA values in logMIC and filter Unity
input_naomit <- input_selected %>%
mutate(logMIC = as.numeric(logMIC)) %>%
drop_na(logMIC)
# Eliminar duplicados
input_naomit_out_dup <- input_naomit %>%
distinct(Sequences,.keep_all = TRUE)
ggpubr::gghistogram(input_naomit_out_dup$logMIC)
# Remove outlier in general
input_naomit_out_dup <-  input_naomit_out_dup %>%
rstatix::identify_outliers(logMIC) %>%
anti_join(input_naomit_out_dup,.)
#print(table(input$Genero))
###############
set.seed(321)
index <- createDataPartition(input_naomit_out_dup$logMIC,
p = .8, list = FALSE)
train_input <- input_naomit_out_dup[ index,]
test_input  <- input_naomit_out_dup[-index,]
# Check distributions
train_input %>% mutate(set = "Train") %>%
rbind(test_input %>% mutate(set = "Test")) %>%
ggplot(aes(logMIC, color = set)) +
geom_density()
# Seleccionar variables de informacion
train_info <- train_input %>%
select(Data_ID:References)
test_info <- test_input %>%
select(Data_ID:References)
# Seleccionar variable respuesta y descriptores
train_set <- train_input %>%
select(logMIC, Y:KGA)
test_set <- test_input %>%
select(logMIC, Y:KGA)
#PREPROCESAMIENTO
rec_train <- recipe(logMIC ~ . , data = train_set) %>%
step_nzv(all_predictors()) %>%
step_corr(all_numeric_predictors(), threshold = 0.85) %>%
step_normalize(all_numeric_predictors()) %>%
step_scale(all_predictors()) %>%
prep()
train_prep <- juice(rec_train)
test_prep <- bake(rec_train, new_data = test_input)
########         SELECCION DE CARACTERISTICAS
# Cargar librerias
packages_load <- c("caret", "caretEnsemble", "doParallel", "gbm",
"dplyr")
for (i in packages_load) {
library(i, character.only  = TRUE)
}
# Usar varios nucleos
no_cores <- detectCores()
cl <- makePSOCKcluster(no_cores, outfile = "modeling.log")
registerDoParallel(cl)
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidevsBacillus/rf_fs.rda")
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidevsBacillus/fs_ga.rda")
rf_fs
# Plot
plot(rf_fs)
svglite::svglite(filename = "rfe_reg.svg",
width = 8, height = 6)
plot(rf_fs)
dev.off()
t3 = now()
print(t3-t0)
# El grafico muestra en el eje x: la generacion y, en el eje y: la meadia del RMSE.
plot(fs_ga)
svglite::svglite(filename = "plt_fs_ga.svg",
width = 8, height = 6)
plot(fs_ga)
dev.off()
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidevsBacillus/models_logMIC.rda")
# Final dataset
Train_fs_logMic <- train_prep %>% select(logMIC,
fs_ga$optVariables) %>% as.data.frame()
#_-------------------------------------------
#METRICAS
get_metric <- function(result_models, train_fs, outcome){
models_sel <- result_models %>% names()
tr_metric <- result_models %>%
.[models_sel] %>%
map(predict, train_fs) %>%
map(postResample, train_fs[,outcome]) %>%
bind_rows(.id = "model") %>%
mutate(set = "Train")
ts_metric <- result_models %>%
.[models_sel] %>%
map(predict, test_prep) %>%
map(postResample, test_prep %>% pull(outcome)) %>%
bind_rows(.id = "model") %>%
mutate(set = "Test")
if(outcome == "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, RMSE = mean(RMSE),
Rsquared = mean(Rsquared), MAE = mean(MAE)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
if(outcome != "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, Accuracy = mean(Accuracy),
Kappa = mean(Kappa)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
metric_models <- rbind(tr_metric, cv_metric, ts_metric) %>%   arrange(model)
}
metric_logMIC <- get_metric(models_logMIC, Train_fs_logMic, "logMIC")
print(metric_logMIC, n=20)
xlsx::write.xlsx(metric_logMIC,file='metricslogMIC.xlsx')
#_-------------------------------------------
#DISPERSION
# Tema personalizado
theme_Publication <- function(base_size=14, base_family="sans") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5, margin = margin(0,0,20,0)),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vetical",
legend.key.size= unit(0.5, "cm"),
#legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
# plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
models_plot = c("rf","gbm")
Train_pred <- models_logMIC %>%
.[models_plot] %>%
map(predict, train_prep) %>%
bind_cols(set = "Train") %>%
mutate(logMIC_exp = train_prep$logMIC)
Test_pred <- models_logMIC %>%
.[models_plot] %>%
map(predict, test_prep) %>%
bind_cols(set = "Test") %>%
mutate(logMIC_exp = test_prep$logMIC)
set_pred <- rbind(Train_pred, Test_pred) %>%
# na.omit() %>%
gather(key = "model", value = "logMIC_pred", -set, -logMIC_exp)
# Cambiar nombre al titulo de cada modelo (opcional)
model_names <- c( #`lm` = "MLR",
`lm` = "MLR",
`pls` = "PLS",
`svmPoly` = "SVM-Poly",
`svmLinear` = "SVM-Linear",
`rf` = "RF",
`gbm` = "GBM",
`svmRadial` = "SVM-Rad")
# cambiar el orden de los modelos en el grafico (opcional)
# lev_model <- c('lm','pls','svmRadial',
#                'rf', 'gbm')
models_sel <- names(models_logMIC)
lev_model <- models_sel
# Run plot
plt_scatter <- set_pred %>%
ggplot(aes(logMIC_exp, logMIC_pred, color = set)) +
geom_point(size = 1.65, alpha = .55, stroke = 0) +
geom_abline(size = 0.3) +
facet_wrap( ~ factor(model, levels = lev_model),
labeller = as_labeller(model_names)
) +
labs(x = "Experimental", y = "Predicted",
color = NULL) +
theme_Publication()
svglite::svglite(filename = "scatter_GN2.svg",
width = 8, height = 5)
plt_scatter
dev.off()
#SECOND PLOT
# Cargar la biblioteca ggplot2
library(ggplot2)
# Datos de ejemplo
x <- set_pred %>% filter(set=="Test", model == "rf") %>% select(logMIC_exp)
y <- set_pred %>% filter(set=="Test", model == "rf") %>% select(logMIC_pred)
# Crear un data frame con los datos
data <- data.frame(x, y)
ml = lm(logMIC_pred~logMIC_exp, data = data)
# Extracting R-squared parameter from summary
r2 <- summary(ml)$r.squared
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(title = "Gráfico de Dispersión", x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "yellow", high = "red",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("R² =", round(r2, 3)))+
theme_minimal()
# Mostrar el gráfico
scatter_plot
svglite::svglite(filename = "Scatterplot3.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()
#IMPORTANCIA DE LAS VARIABLES
# Variable importance ------
get_imp <- function(model){
require(caret)
result <- varImp(model) %>%
.$importance %>%
tibble::rownames_to_column("variables") %>%
# arrange(desc(Overall)) %>%
as_tibble()
}
# List with variable importance
varimp_logMIC <- models_logMIC %>%
map(get_imp)
# Clean file
save_varimp <- function(varimp_list, file) {
models_sel <- names(varimp_list)
if(file.exists(file)) file.remove(file)
for (i in models_sel) {
xlsx::write.xlsx(varimp_list[[i]], file = file,
sheetName = i, append = TRUE)
}
}
save_varimp(varimp_logMIC, file = "varimp_logMIC.xlsx")
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "red", high = "yellow",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("R² =", round(r2, 3)))+
theme_minimal()
# Mostrar el gráfico
scatter_plot
svglite::svglite(filename = "Scatterplot3.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()
n <- count(data)
View(n)
n <- c(count(data))
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "red", high = "yellow",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("R² =", round(r2, 3)))+
geom_text(x = 0.75, y = 2.5, label = paste("n =", n))+
theme_minimal()
# Mostrar el gráfico
scatter_plot
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidesVsAll/SubDataSets/test_prep.rda")
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidesVsGramN/SubDataSets/test_prep.rda")
test_prep
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidesVsGramN/SubDataSets/test_prep.rda")
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidesVsGramN/SubDataSets/train_prep.rda")
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidesVsGramN/Resultados/rf_fs.rda")
View(rf_fs)
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/Regresion PeptidesVsGramP/SubDataSets/test_prep.rda")

set.seed(123)
fivecv_5_multi <- trainControl(method = "repeatedcv",
number = 2,
repeats = 1,
verboseIter = TRUE,
allowParallel = TRUE,
savePredictions = "final",
index =
createMultiFolds(y_vector, 2, 1))
# Final dataset
Train_fs_logMic <- train_prep %>% select(logMIC,
fs_ga$optVariables) %>% as.data.frame()
# Regression logMIC
models_logMIC <- caretList(logMIC~., data = Train_fs_logMic,
trControl = fivecv_5_multi,
tuneList = models,
continue_on_fail = TRUE)
#save(models_logMIC, file = "Resultados/models_logMIC.rda")
#_-------------------------------------------
#METRICAS
get_metric <- function(result_models, train_fs, outcome){
models_sel <- result_models %>% names()
tr_metric <- result_models %>%
.[models_sel] %>%
map(predict, train_fs) %>%
map(postResample, train_fs[,outcome]) %>%
bind_rows(.id = "model") %>%
mutate(set = "Train")
ts_metric <- result_models %>%
.[models_sel] %>%
map(predict, test_prep) %>%
map(postResample, test_prep %>% pull(outcome)) %>%
bind_rows(.id = "model") %>%
mutate(set = "Test")
if(outcome == "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, RMSE = mean(RMSE),
Rsquared = mean(Rsquared), MAE = mean(MAE)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
if(outcome != "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, Accuracy = mean(Accuracy),
Kappa = mean(Kappa)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
metric_models <- rbind(tr_metric, cv_metric, ts_metric) %>%   arrange(model)
}
metric_logMIC <- get_metric(models_logMIC, Train_fs_logMic, "logMIC")
print(metric_logMIC,n=20)
# List of models and hyperparameters
mod_tune <- 20
# Methods
models <- list(
lm = caretModelSpec(method = "lm"),
pls = caretModelSpec(method = "pls", tuneLength = 20),
svmLinear = caretModelSpec(method = "svmLinear", tuneLength = 10),
svmRadial = caretModelSpec(method = "svmRadial", tuneLength = 10),
svmPoly = caretModelSpec(method = "svmPoly", tuneLength = 3),
rf = caretModelSpec(method = "rf", tuneLength = 15),
gbm = caretModelSpec(method = "gbm")
)
# Cross validation paramters
outcome <- "logMIC"
y_vector <- train_prep %>% as.data.frame() %>% .[,outcome]
set.seed(123)
fivecv_5_multi <- trainControl(method = "repeatedcv",
number = 2,
repeats = 1,
verboseIter = TRUE,
allowParallel = TRUE,
savePredictions = "final",
index =
createMultiFolds(y_vector, 2, 1))
# Final dataset
Train_fs_logMic <- train_prep %>% select(logMIC,
fs_ga$optVariables) %>% as.data.frame()
# Regression logMIC
models_logMIC <- caretList(logMIC~., data = Train_fs_logMic,
trControl = fivecv_5_multi,
tuneList = models,
continue_on_fail = TRUE)
#save(models_logMIC, file = "Resultados/models_logMIC.rda")
#_-------------------------------------------
#METRICAS
get_metric <- function(result_models, train_fs, outcome){
models_sel <- result_models %>% names()
tr_metric <- result_models %>%
.[models_sel] %>%
map(predict, train_fs) %>%
map(postResample, train_fs[,outcome]) %>%
bind_rows(.id = "model") %>%
mutate(set = "Train")
ts_metric <- result_models %>%
.[models_sel] %>%
map(predict, test_prep) %>%
map(postResample, test_prep %>% pull(outcome)) %>%
bind_rows(.id = "model") %>%
mutate(set = "Test")
if(outcome == "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, RMSE = mean(RMSE),
Rsquared = mean(Rsquared), MAE = mean(MAE)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
if(outcome != "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, Accuracy = mean(Accuracy),
Kappa = mean(Kappa)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
metric_models <- rbind(tr_metric, cv_metric, ts_metric) %>%   arrange(model)
}
metric_logMIC <- get_metric(models_logMIC, Train_fs_logMic, "logMIC")
print(metric_logMIC,n=20)
xlsx::write.xlsx(metric_logMIC,file='metricslogMIC.xlsx')
# List of models and hyperparameters
mod_tune <- 20
# Methods
models <- list(
lm = caretModelSpec(method = "lm"),
pls = caretModelSpec(method = "pls", tuneLength = 20),
svmLinear = caretModelSpec(method = "svmLinear", tuneLength = 10),
svmRadial = caretModelSpec(method = "svmRadial", tuneLength = 10),
svmPoly = caretModelSpec(method = "svmPoly", tuneLength = 3),
rf = caretModelSpec(method = "rf", tuneLength = 18),
gbm = caretModelSpec(method = "gbm")
)
# Cross validation paramters
outcome <- "logMIC"
y_vector <- train_prep %>% as.data.frame() %>% .[,outcome]
set.seed(123)
fivecv_5_multi <- trainControl(method = "repeatedcv",
number = 2,
repeats = 1,
verboseIter = TRUE,
allowParallel = TRUE,
savePredictions = "final",
index =
createMultiFolds(y_vector, 2, 1))
# Final dataset
Train_fs_logMic <- train_prep %>% select(logMIC,
fs_ga$optVariables) %>% as.data.frame()
# Regression logMIC
models_logMIC <- caretList(logMIC~., data = Train_fs_logMic,
trControl = fivecv_5_multi,
tuneList = models,
continue_on_fail = TRUE)
#save(models_logMIC, file = "Resultados/models_logMIC.rda")
#_-------------------------------------------
#METRICAS
get_metric <- function(result_models, train_fs, outcome){
models_sel <- result_models %>% names()
tr_metric <- result_models %>%
.[models_sel] %>%
map(predict, train_fs) %>%
map(postResample, train_fs[,outcome]) %>%
bind_rows(.id = "model") %>%
mutate(set = "Train")
ts_metric <- result_models %>%
.[models_sel] %>%
map(predict, test_prep) %>%
map(postResample, test_prep %>% pull(outcome)) %>%
bind_rows(.id = "model") %>%
mutate(set = "Test")
if(outcome == "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, RMSE = mean(RMSE),
Rsquared = mean(Rsquared), MAE = mean(MAE)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
if(outcome != "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, Accuracy = mean(Accuracy),
Kappa = mean(Kappa)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
metric_models <- rbind(tr_metric, cv_metric, ts_metric) %>%   arrange(model)
}
metric_logMIC <- get_metric(models_logMIC, Train_fs_logMic, "logMIC")
print(metric_logMIC,n=20)
#_-------------------------------------------
#DISPERSION
# Tema personalizado
theme_Publication <- function(base_size=14, base_family="sans") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5, margin = margin(0,0,20,0)),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vetical",
legend.key.size= unit(0.5, "cm"),
#legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
# plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
Train_pred <- models_logMIC %>%
# .[models_sel] %>%
map(predict, train_prep) %>%
bind_cols(set = "Train") %>%
mutate(logMIC_exp = train_prep$logMIC)
Test_pred <- models_logMIC %>%
# .[models_sel] %>%
map(predict, test_prep) %>%
bind_cols(set = "Test") %>%
mutate(logMIC_exp = test_prep$logMIC)
set_pred <- rbind(Train_pred, Test_pred) %>%
# na.omit() %>%
gather(key = "model", value = "logMIC_pred", -set, -logMIC_exp)
# Cambiar nombre al titulo de cada modelo (opcional)
model_names <- c(
`lm` = "MLR",
`pls` = "PLS",
`svmPoly` = "SVM-Poly",
`svmLinear` = "SVM-Linear",
`rf` = "RF",
`gbm` = "GBM",
`svmRadial` = "SVM-Rad")
# cambiar el orden de los modelos en el grafico (opcional)
# lev_model <- c('lm','pls','svmRadial',
#                'rf', 'gbm')
models_sel <- names(models_logMIC)
lev_model <- models_sel
# Run plot
plt_scatter <- set_pred %>%
ggplot(aes(logMIC_exp, logMIC_pred, color = set)) +
geom_point(size = 1.7, alpha = 0.45, stroke = 0) +
geom_abline(size = 0.3) +
facet_wrap( ~ factor(model, levels = lev_model),
labeller = as_labeller(model_names)
) +
labs(x = "Experimental", y = "Predicted",
color = NULL) +
theme_Publication()
svglite::svglite(filename = "scatter_Ecoli.svg",
width = 8, height = 6)
plt_scatter
dev.off()
svglite::svglite(filename = "scatter_Ecoli.svg",
width = 8, height = 8)
plt_scatter
dev.off()
#IMPORTANCIA DE LAS VARIABLES
# Variable importance ------
get_imp <- function(model){
require(caret)
result <- varImp(model) %>%
.$importance %>%
tibble::rownames_to_column("variables") %>%
# arrange(desc(Overall)) %>%
as_tibble()
}
# List with variable importance
varimp_logMIC <- models_logMIC %>%
map(get_imp)
# Clean file
save_varimp <- function(varimp_list, file) {
models_sel <- names(varimp_list)
if(file.exists(file)) file.remove(file)
for (i in models_sel) {
xlsx::write.xlsx(varimp_list[[i]], file = file,
sheetName = i, append = TRUE)
}
}
save_varimp(varimp_logMIC, file = "Resultados/varimp_logMIC.xlsx")
save_varimp(varimp_logMIC, file = "varimp_logMIC.xlsx")
View(set_pred)
data <- set_pred %>% filter(set=="Test", model == "rf") %>% select(logMIC_exp,logMIC_pred)
View(data)
linear = lm(logMIC_exp~logMIC_pred, data = data)
# Extracting R-squared parameter from summary
r2_linear <- summary(ml)$r.squared
lm = lm(logMIC_exp~logMIC_pred, data = data)
# Extracting R-squared parameter from summary
r2_linear <- summary(ml)$r.squared
linear = lm(logMIC_exp~logMIC_pred, data = data)
View(linear)
r2_linear <- summary(linear)$r.squared
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = rf), size = 3) + # Colorear por valores de "y"
labs(title = "Gráfico de Dispersión", x = "LogMIC predicho", y = "logMBC") +
scale_color_gradient(low = "red", high = "yellow",name="RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_exp), size = 3) + # Colorear por valores de "y"
labs(title = "Gráfico de Dispersión", x = "LogMIC predicho", y = "logMBC") +
scale_color_gradient(low = "red", high = "yellow",name="RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
linear = lm(logMIC_exp~logMIC_pred, data = data)
# Extracting R-squared parameter from summary
r2_linear <- summary(linear)$r.squared
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_exp), size = 3) + # Colorear por valores de "y"
labs(title = "Gráfico de Dispersión", x = "LogMIC predicho", y = "logMBC") +
scale_color_gradient(low = "red", high = "yellow",name="RF") + # Colores de amarillo a rojo
geom_smooth(method=linear , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
linear = lm(logMIC_exp~logMIC_pred, data = data)
# Extracting R-squared parameter from summary
r2_linear <- summary(linear)$r.squared
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_exp), size = 3) + # Colorear por valores de "y"
labs(title = "Gráfico de Dispersión", x = "LogMIC predicho", y = "logMBC") +
scale_color_gradient(low = "red", high = "yellow",name="RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
lm = lm(logMIC_exp~logMIC_pred, data = data)
# Extracting R-squared parameter from summary
r2_linear <- summary(lm)$r.squared
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_exp), size = 3) + # Colorear por valores de "y"
labs(title = "Gráfico de Dispersión", x = "LogMIC predicho", y = "logMBC") +
scale_color_gradient(low = "red", high = "yellow",name="RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
data <- set_pred %>% filter(set=="Test", model == "rf") %>% select(logMIC_exp,logMIC_pred)
ml = lm(logMIC_exp~logMIC_pred, data = data)
# Extracting R-squared parameter from summary
r2 <- summary(ml)$r.squared
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_exp), size = 3) + # Colorear por valores de "y"
labs(title = "Gráfico de Dispersión", x = "LogMIC predicho", y = "logMBC") +
scale_color_gradient(low = "red", high = "yellow",name="RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 2) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF") +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
binomial_smooth() +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
ml = lm(logMIC_exp~logMIC_pred, data = data)
# Extracting R-squared parameter from summary
r2 <- summary(ml)$r.squared
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
geom_smooth(method="lm" , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
#################################################################################
#DIBUJAR UN GRAFICO DE DISPERSION EN R
data <- set_pred %>% filter(set=="Test", model == "rf") %>% select(logMIC_exp,logMIC_pred)
ml = lm(logMIC_exp~logMIC_pred, data = data)
# Extracting R-squared parameter from summary
r2 <- summary(ml)$r.squared
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
geom_smooth(method="lm" , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.85, y = 2.15, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
svglite::svglite(filename = "PlotReg_RFvsEcoli.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
geom_smooth(method="lm" , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.0, y = 2.5, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
svglite::svglite(filename = "PlotReg_RFvsEcoli.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
geom_smooth(method="lm" , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.25, y = 2.5, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
svglite::svglite(filename = "PlotReg_RFvsEcoli.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
geom_smooth(method="lm" , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.3, y = 2.5, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
svglite::svglite(filename = "PlotReg_RFvsEcoli.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
geom_smooth(method="lm" , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.3, y = 2.55, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
svglite::svglite(filename = "PlotReg_RFvsEcoli.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()
# Crear el gráfico de dispersión
scatter_plot <- ggplot(data, aes(x = logMIC_pred, y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs(x = "LogMIC predicho", y = "logMIC") +
scale_color_gradient(low = "red", high = "yellow",name="LogMIC \nPredicted") + # Colores de amarillo a rojo
geom_smooth(method="lm" , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.3, y = 2.6, label = paste("R² =", round(r2_linear, 3)))
theme_minimal()
# Mostrar el gráfico
scatter_plot
svglite::svglite(filename = "PlotReg_RFvsEcoli.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()

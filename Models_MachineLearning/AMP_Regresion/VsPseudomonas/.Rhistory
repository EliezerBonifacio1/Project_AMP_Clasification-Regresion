# Cargar librerias
packages_load <- c("tidyverse",  "readxl", "recipes", "rstatix",
"caret", "caretEnsemble", "doParallel", "gbm")
for (i in packages_load) {
library(i, character.only  = TRUE)
}
#Cargar los datos
input <- read_excel("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/AMP_Regresion/VsBacillus/DataSet_AntimicrobialPeptides_Descriptors.xlsx")
setwd("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/AMP_Regresion/VsPseudomonas")
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/AMP_Regresion/VsPseudomonas/test_prep.rda")
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/AMP_Regresion/VsPseudomonas/train_prep.rda")
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/AMP_Regresion/VsPseudomonas/models_logMIC.rda")
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/AMP_Regresion/VsPseudomonas/FinalPreprocessing_algoritm.rda")
# _-------------------------------------------
# METRICAS
get_metric <- function(result_models, train_fs, outcome){
models_sel <- result_models %>% names()
tr_metric <- result_models %>%
.[models_sel] %>%
map(predict, train_fs) %>%
map(postResample, train_fs[,outcome]) %>%
bind_rows(.id = "model") %>%
mutate(set = "Train")
ts_metric <- result_models %>%
.[models_sel] %>%
map(predict, test_prep) %>%
map(postResample, test_prep %>% pull(outcome)) %>%
bind_rows(.id = "model") %>%
mutate(set = "Test")
if(outcome == "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, RMSE = mean(RMSE),
Rsquared = mean(Rsquared), MAE = mean(MAE)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
if(outcome != "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, Accuracy = mean(Accuracy),
Kappa = mean(Kappa)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
metric_models <- rbind(tr_metric, cv_metric, ts_metric) %>%   arrange(model)
}
metric_logMIC <- get_metric(models_logMIC, Train_fs_logMic, "logMIC")
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/AMP_Regresion/VsPseudomonas/fs_ga.rda")
# _-------------------------------------------
# METRICAS
get_metric <- function(result_models, train_fs, outcome){
models_sel <- result_models %>% names()
tr_metric <- result_models %>%
.[models_sel] %>%
map(predict, train_fs) %>%
map(postResample, train_fs[,outcome]) %>%
bind_rows(.id = "model") %>%
mutate(set = "Train")
ts_metric <- result_models %>%
.[models_sel] %>%
map(predict, test_prep) %>%
map(postResample, test_prep %>% pull(outcome)) %>%
bind_rows(.id = "model") %>%
mutate(set = "Test")
if(outcome == "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, RMSE = mean(RMSE),
Rsquared = mean(Rsquared), MAE = mean(MAE)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
if(outcome != "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, Accuracy = mean(Accuracy),
Kappa = mean(Kappa)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
metric_models <- rbind(tr_metric, cv_metric, ts_metric) %>%   arrange(model)
}
metric_logMIC <- get_metric(models_logMIC, Train_fs_logMic, "logMIC")
fs_ga$optVariables
Train_fs_logMic <- train_prep2 %>% select(logMIC,
fs_ga$optVariables) %>% as.data.frame()
train_set2 <- train_set %>%
select(logMIC,fs_ga$optVariables) # Seleccionando las mejores variables segun AG
# +
t0 = now()
print(" ################ LOADED DATA ###############")
# Filtro inicio
input_selected <- input %>%
rename(logMIC = "Mesure_(log)") %>%
rename(hoopwoods_1_mean = "hopp-woods_1_mean") %>%
filter(Cuantification_Type == "MIC" &
Genero =="Pseudomonas" &
Unity == "Âµg/ml"  &
is.na(Notes))
# -
# Delete NA values in logMIC and filter Unity
input_naomit <- input_selected %>%
mutate(logMIC = as.numeric(logMIC)) %>%
drop_na(logMIC)
# Eliminar duplicados
input_naomit_out_dup <- input_naomit %>%
distinct(Sequences,.keep_all = TRUE)
input_naomit_out_dup
ggpubr::gghistogram(input_naomit_out_dup$logMIC)
# Remove outlier in general
input_naomit_out_dup <-  input_naomit_out_dup %>%
rstatix::identify_outliers(logMIC) %>%
anti_join(input_naomit_out_dup,.)
# print(table(input$Genero))
# ##############
set.seed(321)
index <- createDataPartition(input_naomit_out_dup$logMIC,
p = .8, list = FALSE)
train_input <- input_naomit_out_dup[ index,]
test_input  <- input_naomit_out_dup[-index,]
# Check distributions
train_input %>% mutate(set = "Train") %>%
rbind(test_input %>% mutate(set = "Test")) %>%
ggplot(aes(logMIC, color = set)) +
geom_density()
# Seleccionar variables de informacion
train_info <- train_input %>%
select(Data_ID:References)
test_info <- test_input %>%
select(Data_ID:References)
# Seleccionar variable respuesta y descriptores
train_set <- train_input %>%
select(logMIC, Y:KGA)
test_set <- test_input %>%
select(logMIC, Y:KGA)
# PREPROCESAMIENTO
rec_train <- recipe(logMIC ~ . , data = train_set) %>%
step_nzv(all_predictors()) %>%
step_corr(all_numeric_predictors(), threshold = 0.85) %>%
#step_normalize(all_numeric_predictors()) %>%
step_scale(all_predictors()) %>%
prep()
train_prep <- juice(rec_train)
test_prep <- bake(rec_train, new_data = test_input)
train_set2 <- train_set %>%
select(logMIC,fs_ga$optVariables) # Seleccionando las mejores variables segun AG
rec_train2 <- recipe(logMIC~ . , data = train_set2) %>%
#step_nzv(all_predictors()) %>%
#step_corr(all_numeric_predictors(), threshold = 0.85) %>%
#step_normalize(all_numeric_predictors()) %>%
step_scale(all_predictors()) %>%
prep()
train_prep2 <- juice(rec_train2)
# Final dataset
Train_fs_logMic <- train_prep2 %>% select(logMIC,
fs_ga$optVariables) %>% as.data.frame()
get_metric <- function(result_models, train_fs, outcome){
models_sel <- result_models %>% names()
tr_metric <- result_models %>%
.[models_sel] %>%
map(predict, train_fs) %>%
map(postResample, train_fs[,outcome]) %>%
bind_rows(.id = "model") %>%
mutate(set = "Train")
ts_metric <- result_models %>%
.[models_sel] %>%
map(predict, test_prep) %>%
map(postResample, test_prep %>% pull(outcome)) %>%
bind_rows(.id = "model") %>%
mutate(set = "Test")
if(outcome == "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, RMSE = mean(RMSE),
Rsquared = mean(Rsquared), MAE = mean(MAE)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
if(outcome != "logMIC") {
cv_metric <- result_models %>%
.[models_sel] %>%
map(pluck, "resample") %>%
map(summarise, Accuracy = mean(Accuracy),
Kappa = mean(Kappa)) %>%
bind_rows(., .id = "model") %>% mutate(set = "cv")
}
metric_models <- rbind(tr_metric, cv_metric, ts_metric) %>%   arrange(model)
}
metric_logMIC <- get_metric(models_logMIC, Train_fs_logMic, "logMIC")
print(metric_logMIC,n=20)
# SECOND PLOT
# Cargar la biblioteca ggplot2
library(ggplot2)
# Datos de ejemplo
x <- set_pred %>% filter(set=="Test", model == "rf") %>% select(logMIC_exp)
# _-------------------------------------------
# DISPERSION GRAFICOS
# Tema personalizado
theme_Publication <- function(base_size=14, base_family="sans") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5, margin = margin(0,0,20,0)),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vetical",
legend.key.size= unit(0.5, "cm"),
#legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
# plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
Train_pred <- models_logMIC %>%
# .[models_sel] %>%
map(predict, train_prep) %>%
bind_cols(set = "Train") %>%
mutate(logMIC_exp = train_prep$logMIC)
Test_pred <- models_logMIC %>%
# .[models_sel] %>%
map(predict, test_prep) %>%
bind_cols(set = "Test") %>%
mutate(logMIC_exp = test_prep$logMIC)
set_pred <- rbind(Train_pred, Test_pred) %>%
# na.omit() %>%
gather(key = "model", value = "logMIC_pred", -set, -logMIC_exp)
# Cambiar nombre al titulo de cada modelo (opcional)
model_names <- c(
`lm` = "MLR",
`pls` = "PLS",
`svmPoly` = "SVM-Poly",
`svmLinear` = "SVM-Linear",
`rf` = "RF",
`gbm` = "GBM",
`svmRadial` = "SVM-Rad")
# cambiar el orden de los modelos en el grafico (opcional)
# lev_model <- c('lm','pls','svmRadial',
#                'rf', 'gbm')
models_sel <- names(models_logMIC)
lev_model <- models_sel
# Run plot
plt_scatter <- set_pred %>%
ggplot(aes(logMIC_exp, logMIC_pred, color = set)) +
geom_point(size = 1.0, alpha = 0.45, stroke = 0) +
geom_abline(size = 0.3) +
facet_wrap( ~ factor(model, levels = lev_model),
labeller = as_labeller(model_names)
) +
labs(x = "Experimental", y = "Predicted",
color = NULL) +
theme_Publication()
# SECOND PLOT
# Cargar la biblioteca ggplot2
library(ggplot2)
# Datos de ejemplo
x <- set_pred %>% filter(set=="Test", model == "rf") %>% select(logMIC_exp)
y <- set_pred %>% filter(set=="Test", model == "rf") %>% select(logMIC_pred)
# Crear un data frame con los datos
data <- data.frame(x, y)
ml = lm(logMIC_pred~logMIC_exp, data = data)
# Extracting R-squared parameter from summary
r2 <- summary(ml)$r.squared
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "yellow", high = "red",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
ml = lm(logMIC_pred~logMIC_exp, data = data)
# Extracting R-squared parameter from summary
r2 <- summary(ml)$r.squared
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "#2ECC71", high = "red",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "#2ECC71", high = "#F1C40F",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "#A9DFBF", high = "#F1C40F",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "#A9DFBF", high = "#E67E22",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "#D5F5E3", high = "#E67E22",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "#D5F5E3", high = "red",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "yellow", high = "red",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 0.75, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "yellow", high = "red",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 1, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
svglite::svglite(filename = "Scatterplot3.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()
ml = lm(logMIC_pred~logMIC_exp, data = data)
# Extracting R-squared parameter from summary
r2 <- summary(ml)$r.squared
# Crear el grÃ¡fico de dispersiÃ³n
scatter_plot <- ggplot(data, aes(x = logMIC_pred , y = logMIC_exp)) +
geom_point(aes(color = logMIC_pred), size = 3) + # Colorear por valores de "y"
labs( x = "LogMIC Predicted", y = "LogMIC Experimental") +
scale_color_gradient(low = "yellow", high = "red",name= "LogMIC \nPredicho \npor RF") + # Colores de amarillo a rojo
geom_smooth(method=lm , color="#85929E", fill="#AEB6BF", se=T) +
geom_text(x = 1, y = 3, label = paste("RÂ² =", round(r2, 3)))+
theme_minimal()
# Mostrar el grÃ¡fico
scatter_plot
svglite::svglite(filename = "Scatterplot3.svg",
width = 8, height = 5)
plot(scatter_plot)
dev.off()
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/AMP_Regresion/VsBacillus/test_prep.rda")
test_prep
load("C:/Users/eliez/OneDrive/Tesis y titulacion/Antimicrobial_Peptides_QSAR_Prediction_Project/Models/AMP_Regresion/VsStaphylococcus/test_prep.rda")
